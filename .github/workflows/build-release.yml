name: Build and Release

on:
  schedule:
    - cron: 0 * * * *
  push:
    branches:
      - "master"
  workflow_dispatch:

env:
  CACHE_DIR: ~/cache
  SDK_CHANNEL_VERSION: "24.10"

jobs:
  check:
    runs-on: ubuntu-latest
    outputs:
      PACKAGE_NAME: ${{ env.PACKAGE_NAME }}
      PACKAGE_NAME1: ${{ env.PACKAGE_NAME_SHORT }}
      COMMIT_MSG: ${{ env.COMMIT_MSG }}
      TAG: ${{ env.TAG }}
      ver: ${{ env.ver }}
      hash: ${{ env.hash }}
      commit: ${{ env.commit }}
      SDK_CHANNEL_VERSION : "${{ steps.set.outputs.SDK_CHANNEL_VERSION }}"
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Git init
        run: |
            sed -i '/url =/d' ./.git/config
            git config --global user.email 41898282+github-actions[bot]@users.noreply.github.com
            git config --global user.name github-actions[bot]
            git remote set-url --add origin "https://${{ github.actor }}:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}"
      - name: Check Smartdns
        run: |
          latest=$(curl -sL https://github.com/pymumu/smartdns/releases )
          ver="1.$(date -d "8 hour" -u +%Y.%m.%d-%H%M)"
          commit=$(curl -sL https://github.com/pymumu/smartdns/commits/master |grep -o '/pymumu/smartdns/commit/[a-z0-9]\+' |head -1 | cut -d\/ -f5)
          commitStatus="$(curl -sL https://github.com/pymumu/smartdns/commit/$commit/status-details -H 'Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8')"
          if ! echo "$commitStatus" |grep -q 'fail'; then
            shortCommit=$(echo $commit |cut -c 1-20)
            if ! git log --oneline | grep -q "$shortCommit"; then
              rm -rf smartdns
              sed -i '/PACKAGE_NAME/,$d' $GITHUB_ENV
              echo "PACKAGE_NAME=smartdns" >> $GITHUB_ENV
              echo "PACKAGE_NAME_SHORT=smartdns" >> $GITHUB_ENV
              echo "COMMIT_MSG=smartdns_$ver $commit" >> $GITHUB_ENV
              echo "TAG=smartdns_$ver" >> $GITHUB_ENV
              echo "hash=skip" >> $GITHUB_ENV
              echo "ver=$ver" >> $GITHUB_ENV
              echo "commit=$commit" >> $GITHUB_ENV
            fi
          fi
      - name: Downloading Smartdns
        if: ${{ env.COMMIT_MSG }}
        uses: actions/checkout@v4
        with:
          repository: pymumu/smartdns
          ref: ${{ env.commit }}
          sparse-checkout: package/openwrt/
          sparse-checkout-cone-mode: false
          path: tmp-file
      - name: Prepare Smartdns
        if: ${{ env.COMMIT_MSG }}
        run: |
          mv -f tmp-file/package/openwrt/ smartdns/
          rm -rf tmp-file
          sed -i -e "/^PKG_VERSION/s#=.*#=${{ env.ver }}#" -e "/^PKG_SOURCE_VERSION/s#=.*#=${{ env.commit }}#" smartdns/Makefile
      - name: Check Xray
        if: ${{ !env.COMMIT_MSG }}
        run: |
          latest=$(curl -sL https://github.com/XTLS/Xray-core/releases )
          ver=$(echo "$latest"|grep -o 'tree/v[0-9]\+\.[0-9]\+\.[0-9]\+\(-[0-9]\+\)\?' |head -1 |cut -d v -f2)
          if ! git tag -l |grep -q "xray_v$ver"; then
            wget https://codeload.github.com/XTLS/Xray-core/tar.gz/v$ver
            hash=$(sha256sum v$ver |cut -d\  -f1)
            rm -f v$ver
            sed -i -e "/^PKG_HASH/s#=.*#=$hash#" -e "/^PKG_VERSION/s#=.*#=$ver#" xray/Makefile
            sed -i '/PACKAGE_NAME/,$d' $GITHUB_ENV
            echo "PACKAGE_NAME=xray-core" >> $GITHUB_ENV
            echo "PACKAGE_NAME_SHORT=xray" >> $GITHUB_ENV
            echo "COMMIT_MSG=xray_v$ver" >> $GITHUB_ENV
            echo "TAG=xray_v$ver" >> $GITHUB_ENV
            echo "hash=$hash" >> $GITHUB_ENV
            echo "ver=$ver" >> $GITHUB_ENV
            echo "commit=" >> $GITHUB_ENV
          fi
      - name: Set Variables
        if: ${{ env.COMMIT_MSG }}
        id: set
        run: |
          SDK_CHANNEL_VERSION=$(curl -sL https://downloads.openwrt.org/ |grep -o "${{ env.SDK_CHANNEL_VERSION }}.[0-9]/targets" |cut -d\/ -f1 |head -1)
          echo "SDK_CHANNEL_VERSION=$SDK_CHANNEL_VERSION" >> $GITHUB_OUTPUT
          echo "PACKAGE_NAME=$PACKAGE_NAME" >> $GITHUB_OUTPUT
          echo "PACKAGE_NAME_SHORT=$PACKAGE_NAME_SHORT" >> $GITHUB_OUTPUT
          echo "COMMIT_MSG=$COMMIT_MSG" >> $GITHUB_OUTPUT
          echo "TAG=$TAG" >> $GITHUB_OUTPUT
          echo "ver=$ver" >> $GITHUB_OUTPUT
          echo "commit=$commit" >> $GITHUB_OUTPUT
          echo "hash=$hash" >> $GITHUB_OUTPUT
      - name: Push to master
        if: ${{ env.COMMIT_MSG }}
        continue-on-error: true
        run: |
          git add --all
          git commit -m "$COMMIT_MSG"
          git push -u origin master
      - name: Upload To Artifact
        if: ${{ env.COMMIT_MSG }}
        uses: actions/upload-artifact@v4
        with:
          name: source-code
          path: |
            ${{ github.workspace }}
            !${{ github.workspace }}/.**
      
      - name: Delete older workflow runs and artifacts
        uses: Mattraks/delete-workflow-runs@main
        with:
          token: ${{ github.token }}
          repository: ${{ github.repository }}
          retain_days: 14
          keep_minimum_runs: 10

  build:
    needs: check
    if: ${{ needs.check.outputs.PACKAGE_NAME }}
    name: Build for ${{ matrix.arch }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          - arch: aarch64_cortex-a53
            sdk_url_path: bcm27xx/bcm2710
            sdk_name: bcm27xx-bcm2710
          - arch: aarch64_cortex-a72
            sdk_url_path: mvebu/cortexa72
            sdk_name: mvebu-cortexa72
          - arch: aarch64_generic
            sdk_url_path: layerscape/armv8_64b
            sdk_name: layerscape-armv8_64b
          - arch: arm_arm1176jzf-s_vfp
            sdk_url_path: bcm27xx/bcm2708
            sdk_name: bcm27xx-bcm2708
          #- arch: arm_arm926ej-s
          #  sdk_url_path: at91/legacy
          #  sdk_name: at91-legacy
          - arch: arm_cortex-a15_neon-vfpv4
            sdk_url_path: ipq806x/generic
            sdk_name: ipq806x-generic
          - arch: arm_cortex-a5-vfpv4
            sdk_url_path: at91/sama5
            sdk_name: at91-sama5
          - arch: arm_cortex-a7_neon-vfpv4
            sdk_url_path: bcm27xx/bcm2709
            sdk_name: bcm27xx-bcm2709
          - arch: arm_cortex-a8_vfpv3
            sdk_url_path: sunxi/cortexa8
            sdk_name: sunxi-cortexa8
          - arch: arm_cortex-a9
            sdk_url_path: bcm53xx/generic
            sdk_name: bcm53xx-generic
          - arch: arm_cortex-a9_vfpv3
            sdk_url_path: mvebu/cortexa9
            sdk_name: mvebu-cortexa9
          - arch: arm_cortex-a9_vfpv3-d16
            sdk_url_path: mvebu/cortexa9
            sdk_name: mvebu-cortexa9
          #- arch: arm_mpcore
          #  sdk_url_path: oxnas/ox820
          #  sdk_name: oxnas-ox820
          #- arch: arm_xscale
          #  sdk_url_path: kirkwood/generic
          #  sdk_name: kirkwood
          #- arch: i386_pentium
          #  sdk_url_path: x86/legacy
          #  sdk_name: x86-legacy
          #- arch: i386_pentium4
          #  sdk_url_path: x86/generic
          #  sdk_name: x86-generic
          #- arch: mips64_octeonplus
          #  sdk_url_path: octeon/generic
          #  sdk_name: octeon
          #- arch: mipsel_24kc
          #  sdk_url_path: ramips/mt7620
          #  sdk_name: ramips-mt7620
          #- arch: mipsel_74kc
          #  sdk_url_path: bcm47xx/mips74k
          #  sdk_name: bcm47xx-mips74k
          #- arch: mipsel_mips32
          #  sdk_url_path: bcm47xx/generic
          #  sdk_name: bcm47xx-generic
          #- arch: mips_24kc
          #  sdk_url_path: ath79/generic
          #  sdk_name: ath79-generic
          #- arch: mips_mips32
          #  sdk_url_path: bcm63xx/generic
          #  sdk_name: bcm63xx-generic
          - arch: x86_64
            sdk_url_path: x86/64
            sdk_name: x86-64
          # - arch: arc_arc700
          #   sdk_url_path: arc770/generic
          #   sdk_name: arc770-generic
          # - arch: arc_archs
          #   sdk_url_path: archs38/generic
          #   sdk_name: archs38-generic
          # - arch: armeb_xscale
          #   sdk_url_path: ixp4xx/generic
          #   sdk_name: ixp4xx-generic
          # - arch: powerpc_464fp
          #   sdk_url_path: apm821xx/nand
          #   sdk_name: apm821xx-nand
          # - arch: powerpc_8540
          #   sdk_url_path: mpc85xx/generic
          #   sdk_name: mpc85xx-generic

    env:
      SDK_URL_PATH: ${{ matrix.sdk_url_path }}
      SDK_NAME: ${{ matrix.sdk_name }}
      SDK_CHANNEL_VERSION: "${{ needs.check.outputs.SDK_CHANNEL_VERSION }}"
      PACKAGE_NAME: ${{ needs.check.outputs.PACKAGE_NAME }}
      PACKAGE_NAME1: ${{ needs.check.outputs.PACKAGE_NAME1 }}
      COMMIT_MSG: ${{ needs.check.outputs.COMMIT_MSG }}
      TAG: ${{ needs.check.outputs.TAG }}
      ver: ${{ needs.check.outputs.ver }}
      hash: ${{ needs.check.outputs.hash }}
      commit: ${{ needs.check.outputs.commit }}
      CCACHE_DIR: ~/.ccache
      CONFIG_CCACHE: y
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: source-code

      - name: Display structure of downloaded files
        run: ls -R

      - name: Set Variables
        run: |
          if [ -n "${{ env.hash }}" ]; then sed -i -e "/^PKG_HASH/s#=.*#=${{ env.hash }}#" -e "/^PKG_MIRROR_HASH/s#=.*#=${{ env.hash }}#" ${{ env.PACKAGE_NAME1 }}/Makefile; fi
          if [ -n "${{ env.ver }}" ]; then sed -i "/^PKG_VERSION/s#=.*#=${{ env.ver }}#" ${{ env.PACKAGE_NAME1 }}/Makefile; fi
          if [ -n "${{ env.commit }}" ]; then sed -i "/^PKG_SOURCE_VERSION/s#=.*#=${{ env.commit }}#" ${{ env.PACKAGE_NAME1 }}/Makefile; fi

      - name: Setup Cache
        uses: actions/cache@v4
        with:
          path: |
            ${{ env.CACHE_DIR }}
            ${{ env.CCACHE_DIR }}
          key: openwrt-${{ matrix.arch }}-${{ github.sha }}-${{ github.run_number }}
          restore-keys: |
            openwrt-${{ matrix.arch }}-
      - name: Install Dependencies
        run: |
          DEBIAN_FRONTEND=noninteractive sudo apt-get install -y ccache gettext libncurses5-dev xsltproc upx
      - name: Create Directories
        run: |
          CACHE_DIR_SDK="$(eval echo "$CACHE_DIR/sdk")"
          CACHE_DIR_DL="$(eval echo "$CACHE_DIR/dl")"
          CACHE_DIR_FEEDS="$(eval echo "$CACHE_DIR/feeds")"
          echo "CACHE_DIR_SDK: $CACHE_DIR_SDK"
          echo "CACHE_DIR_DL: $CACHE_DIR_DL"
          echo "CACHE_DIR_FEEDS: $CACHE_DIR_FEEDS"
          test -d "$CACHE_DIR_SDK" || mkdir -p "$CACHE_DIR_SDK"
          test -d "$CACHE_DIR_DL" || mkdir -p "$CACHE_DIR_DL"
          test -d "$CACHE_DIR_FEEDS" || mkdir -p "$CACHE_DIR_FEEDS"
          echo "CACHE_DIR_SDK=$CACHE_DIR_SDK" >> $GITHUB_ENV
          echo "CACHE_DIR_DL=$CACHE_DIR_DL" >> $GITHUB_ENV
          echo "CACHE_DIR_FEEDS=$CACHE_DIR_FEEDS" >> $GITHUB_ENV
          echo "SDK_HOME=$(mktemp -d)" >> $GITHUB_ENV
      - name: Download and Unzip SDK
        run: |
          cd "$CACHE_DIR_SDK"
          if echo "$SDK_CHANNEL_VERSION" |grep -q '^[0-9]'; then
            SDK_NAME="sdk-${SDK_CHANNEL_VERSION}-${SDK_NAME}_"
            SDK_CHANNEL_VERSION="releases/${SDK_CHANNEL_VERSION}"
          else
            SDK_NAME="sdk-${SDK_NAME}_"
            SDK_CHANNEL_VERSION="snapshots"
          fi
          SDK_URL_PATH="https://downloads.openwrt.org/${SDK_CHANNEL_VERSION}/targets/${SDK_URL_PATH}"
          if ! ( wget -q -O - "$SDK_URL_PATH/sha256sums" | grep -- "$SDK_NAME" > sha256sums.small 2>/dev/null ) ; then
            echo "::error::Can not find ${SDK_NAME} file in sha256sums."
            exit 1
          fi
          SDK_FILE="$(cat sha256sums.small | cut -d' ' -f2 | sed 's/*//g')"
          if ! sha256sum -c ./sha256sums.small >/dev/null 2>&1 ; then
            wget -q -O "$SDK_FILE" "$SDK_URL_PATH/$SDK_FILE"
            if ! sha256sum -c ./sha256sums.small >/dev/null 2>&1 ; then
              echo "::error::SDK can not be verified!"
              exit 1
            fi
          fi
          cd -
          file "$CACHE_DIR_SDK/$SDK_FILE"
          case "$SDK_FILE" in
            *.zst)
              zstd -dc "$CACHE_DIR_SDK/$SDK_FILE" | tar -xf - -C "$SDK_HOME" --strip=1
              ;;
            *.xz)
              tar -Jxf "$CACHE_DIR_SDK/$SDK_FILE" -C "$SDK_HOME" --strip=1
              ;;
          esac
          cd "$SDK_HOME"
          test -d "dl" && rm -rf "dl" || true
          test -d "feeds" && rm -rf "feeds" || true
          ln -s "$CACHE_DIR_DL" "dl"
          ln -s "$CACHE_DIR_FEEDS" "feeds"
          cp feeds.conf.default feeds.conf
          sed -i 's#git.openwrt.org/openwrt/openwrt#github.com/openwrt/openwrt#' feeds.conf
          sed -i 's#git.openwrt.org/feed/packages#github.com/openwrt/packages#' feeds.conf
          sed -i 's#git.openwrt.org/project/luci#github.com/openwrt/luci#' feeds.conf
          sed -i 's#git.openwrt.org/feed/telephony#github.com/openwrt/telephony#' feeds.conf
          cd -
      - name: Update and Install Packages
        env:
          OPENWRT_GOLANG_COMMIT: ${{ secrets.OPENWRT_GOLANG_COMMIT }}
        run: |
          cd "$SDK_HOME"
          ./scripts/feeds update -a
          test -d "feeds/packages/net/$PACKAGE_NAME" && rm -rf "feeds/packages/net/$PACKAGE_NAME" || true
          test -d "feeds/packages/lang/golang" && rm -rf "feeds/packages/lang/golang" || true
          curl https://codeload.github.com/openwrt/packages/tar.gz/${OPENWRT_GOLANG_COMMIT:-master} | tar -xz -C "feeds/packages/lang" --strip=2 packages-${OPENWRT_GOLANG_COMMIT:-master}/lang/golang
          ln -s "${{ github.workspace }}/${{ env.PACKAGE_NAME1 }}" "package/$PACKAGE_NAME"
          ./scripts/feeds install -a
          cd -
      - name: Build Packages
        run: |
          cd "$SDK_HOME"
          make defconfig
          if grep -q 'PKG_MIRROR_HASH.*skip' ${PACKAGE_NAME}/Makefile; then
            make package/${PACKAGE_NAME}/download V=s
            make package/${PACKAGE_NAME}/check FIXUP=1 V=s
          fi
          make package/${PACKAGE_NAME}/{clean,compile} V=s
          find "$SDK_HOME/bin/" -type f -name "*.ipk" -exec ls -lh {} \;
          cd -
      - name: Copy Bin Files
        run: |
          if echo ${PACKAGE_NAME1} |grep -q 'passwall2'; then
            find "$SDK_HOME/bin/" -type f -name "*.ipk" -exec cp {} "${{ github.workspace }}" \;
          else
            find "$SDK_HOME/bin/" -type f -name "*${PACKAGE_NAME1}*.ipk" -exec cp {} "${{ github.workspace }}" \;
          fi
          find "${{ github.workspace }}" -type f -name "*.ipk" -exec ls -lh {} \;
      - name: Upload files to Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.TAG }}-${{ matrix.arch }}
          path: |
            *.ipk

  release:
    needs: [check, build]
    runs-on: ubuntu-latest
    env:
      COMMIT_MSG: ${{ needs.check.outputs.COMMIT_MSG }}
      TAG: ${{ needs.check.outputs.TAG }}
    steps:
      - uses: actions/download-artifact@v4
      - name: Release and Upload Assets
        uses: ncipollo/release-action@v1
        with:
          name: ${{ env.TAG }}
          tag: ${{ env.TAG }}
          body: ${{ env.COMMIT_MSG }}
          allowUpdates: true
          artifacts: |
            **/*.ipk
